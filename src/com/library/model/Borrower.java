
package com.library.model;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class Borrower {
    private int loanId;
    private int bookId;
    private int memberId;
    private LocalDate loanDate;
    private LocalDate dueDate;
    private LocalDate returnDate;
    private boolean renewed;
    private double fineAmount; // New: Fine incurred for this specific loan
    private boolean finePaid;  // New: Status of payment for this loan's fine

    public Borrower(int loanId, int bookId, int memberId, LocalDate loanDate, LocalDate dueDate, LocalDate returnDate, boolean renewed, double fineAmount, boolean finePaid) {
        this.loanId = loanId;
        this.bookId = bookId;
        this.memberId = memberId;
        this.loanDate = loanDate;
        this.dueDate = dueDate;
        this.returnDate = returnDate;
        this.renewed = renewed;
        this.fineAmount = fineAmount; // Initialize new field
        this.finePaid = finePaid;     // Initialize new field
    }

    // Constructor for new loans (ID will be auto-generated by DB)
    public Borrower(int bookId, int memberId, LocalDate loanDate, LocalDate dueDate) {
        this(0, bookId, memberId, loanDate, dueDate, null, false, 0.00, false); // Initialize new fields
    }

    // Getters
    public int getLoanId() { return loanId; }
    public int getBookId() { return bookId; }
    public int getMemberId() { return memberId; }
    public LocalDate getLoanDate() { return loanDate; }
    public LocalDate getDueDate() { return dueDate; }
    public LocalDate getReturnDate() { return returnDate; }
    public boolean isRenewed() { return renewed; }
    public double getFineAmount() { return fineAmount; } // New Getter
    public boolean isFinePaid() { return finePaid; }     // New Getter

    // Setters
    public void setLoanId(int loanId) { this.loanId = loanId; }
    public void setReturnDate(LocalDate returnDate) { this.returnDate = returnDate; }
    public void setRenewed(boolean renewed) { this.renewed = renewed; }
    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }
    public void setFineAmount(double fineAmount) { this.fineAmount = fineAmount; } // New Setter
    public void setFinePaid(boolean finePaid) { this.finePaid = finePaid; }     // New Setter

    /**
     * Calculates the fine for the loan.
     * Fine is Rs. 10 per day for delays.
     *
     * @param currentDate The date against which to check for overdue.
     * @return The fine amount in Rupees.
     */
    public double calculateFine(LocalDate currentDate) {
        // Only calculate if not returned or if returned and fine hasn't been set yet
        if (returnDate != null) {
            if (returnDate.isAfter(dueDate)) {
                long daysOverdue = ChronoUnit.DAYS.between(dueDate, returnDate);
                return daysOverdue * 10.0;
            }
        } else {
            if (currentDate.isAfter(dueDate)) {
                long daysOverdue = ChronoUnit.DAYS.between(dueDate, currentDate);
                return daysOverdue * 10.0;
            }
        }
        return 0.0; // No fine
    }

    @Override
    public String toString() {
        return "Borrower [ID=" + loanId + ", Book ID=" + bookId + ", Member ID=" + memberId +
                ", Loan Date=" + loanDate + ", Due Date=" + dueDate +
                ", Return Date=" + (returnDate != null ? returnDate : "N/A") +
                ", Renewed=" + renewed +
                ", Fine=" + String.format("%.2f", fineAmount) + ", Paid=" + finePaid + "]";
    }
}
